
DEFINEFN code_t* psyco_insn_not(code_t* code)
{
switch (LATEST_OPCODE) {
case 32:
{
/* [s_push(0)] */
INSN_EMIT_modified_opcode(79, 0);
setlatestopcode(79);
return(code);
}
case 90:
{
/* [immed(char), addo, pop, load4, s_push(0)] */
INSN_EMIT_modified_opcode(110, bytecode_size(char));
setlatestopcode(110);
return(code);
}
case 97:
{
/* [s_push(1:255), immed(char), addo, pop, load4, s_push(0)] */
INSN_EMIT_modified_opcode(131, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(131);
return(code);
}
case 185:
{
/* [immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(186, 0);
setlatestopcode(186);
return(code);
}
case 143:
{
/* [cmpltu, s_push(0)] */
INSN_EMIT_modified_opcode(199, 0);
setlatestopcode(199);
return(code);
}
case 109:
{
/* [immed(int), s_push(1), ccall2(indirect(word_t)), s_push(0)] */
INSN_EMIT_modified_opcode(217, bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(217);
return(code);
}
case 241:
{
/* [immed(int), ccall2(indirect(word_t)), s_push(0)] */
INSN_EMIT_modified_opcode(242, bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(242);
return(code);
}
case 86:
{
/* [s_push(0), immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(251, 0);
setlatestopcode(251);
return(code);
}
case 76:
{
/* [cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(252, 0);
setlatestopcode(252);
return(code);
}
} /* switch */
INSN_EMIT_opcode(1);
setlatestopcode(1);
return(code);
}

DEFINEFN code_t* psyco_insn_inv(code_t* code)
{
INSN_EMIT_opcode(2);
setlatestopcode(2);
return(code);
}

DEFINEFN code_t* psyco_insn_abso(code_t* code)
{
INSN_EMIT_opcode(3);
setlatestopcode(3);
return(code);
}

DEFINEFN code_t* psyco_insn_nego(code_t* code)
{
INSN_EMIT_opcode(4);
setlatestopcode(4);
return(code);
}

DEFINEFN code_t* psyco_insn_load1(code_t* code)
{
INSN_EMIT_opcode(5);
setlatestopcode(5);
return(code);
}

DEFINEFN code_t* psyco_insn_load1u(code_t* code)
{
INSN_EMIT_opcode(6);
setlatestopcode(6);
return(code);
}

DEFINEFN code_t* psyco_insn_load2(code_t* code)
{
INSN_EMIT_opcode(7);
setlatestopcode(7);
return(code);
}

DEFINEFN code_t* psyco_insn_load2u(code_t* code)
{
INSN_EMIT_opcode(8);
setlatestopcode(8);
return(code);
}

DEFINEFN code_t* psyco_insn_load4(code_t* code)
{
switch (LATEST_OPCODE) {
case 22:
{
/* [pop] */
INSN_EMIT_modified_opcode(75, 0);
setlatestopcode(75);
return(code);
}
case 74:
{
/* [immed(char), addo, pop] */
INSN_EMIT_modified_opcode(81, bytecode_size(char));
setlatestopcode(81);
return(code);
}
case 88:
{
/* [s_push(1:255), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(93, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(93);
return(code);
}
case 138:
{
/* [decref, s_push(0:255), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(156, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(156);
return(code);
}
case 104:
{
/* [incref, s_push(0:255), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(158, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(158);
return(code);
}
case 133:
{
/* [s_push(0), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(182, bytecode_size(char));
setlatestopcode(182);
return(code);
}
case 195:
{
/* [s_push(1:255), decref, s_push(1:255), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(223, bytecode_size(code_t)+bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(223);
return(code);
}
} /* switch */
INSN_EMIT_opcode(9);
setlatestopcode(9);
return(code);
}

DEFINEFN code_t* psyco_insn_or(code_t* code)
{
INSN_EMIT_opcode(10);
setlatestopcode(10);
return(code);
}

DEFINEFN code_t* psyco_insn_and(code_t* code)
{
INSN_EMIT_opcode(11);
setlatestopcode(11);
return(code);
}

DEFINEFN code_t* psyco_insn_xor(code_t* code)
{
INSN_EMIT_opcode(12);
setlatestopcode(12);
return(code);
}

DEFINEFN code_t* psyco_insn_addo(code_t* code)
{
switch (LATEST_OPCODE) {
case 30:
{
/* [immed(char)] */
INSN_EMIT_modified_opcode(73, bytecode_size(char));
setlatestopcode(73);
return(code);
}
case 84:
{
/* [s_push(1:255), immed(char)] */
INSN_EMIT_modified_opcode(87, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(87);
return(code);
}
case 102:
{
/* [incref, s_push(0:255), immed(char)] */
INSN_EMIT_modified_opcode(103, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(103);
return(code);
}
case 116:
{
/* [s_push(0), immed(char)] */
INSN_EMIT_modified_opcode(132, bytecode_size(char));
setlatestopcode(132);
return(code);
}
case 135:
{
/* [decref, s_push(0:255), immed(char)] */
INSN_EMIT_modified_opcode(137, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(137);
return(code);
}
case 173:
{
/* [s_push(1:255), decref, s_push(1:255), immed(char)] */
INSN_EMIT_modified_opcode(194, bytecode_size(code_t)+bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(194);
return(code);
}
} /* switch */
INSN_EMIT_opcode(13);
setlatestopcode(13);
return(code);
}

DEFINEFN code_t* psyco_insn_subo(code_t* code)
{
INSN_EMIT_opcode(14);
setlatestopcode(14);
return(code);
}

DEFINEFN code_t* psyco_insn_mulo(code_t* code)
{
INSN_EMIT_opcode(15);
setlatestopcode(15);
return(code);
}

DEFINEFN code_t* psyco_insn_lshift(code_t* code)
{
INSN_EMIT_opcode(16);
setlatestopcode(16);
return(code);
}

DEFINEFN code_t* psyco_insn_rshift(code_t* code)
{
INSN_EMIT_opcode(17);
setlatestopcode(17);
return(code);
}

DEFINEFN code_t* psyco_insn_urshift(code_t* code)
{
INSN_EMIT_opcode(18);
setlatestopcode(18);
return(code);
}

DEFINEFN code_t* psyco_insn_cmpeq(code_t* code)
{
switch (LATEST_OPCODE) {
case 78:
{
/* [s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(82, 0);
setlatestopcode(82);
return(code);
}
case 106:
{
/* [ccall2(indirect(word_t)), s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(107, bytecode_size(word_t));
setlatestopcode(107);
return(code);
}
case 112:
{
/* [ccall1(indirect(word_t)), s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(113, bytecode_size(word_t));
setlatestopcode(113);
return(code);
}
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(129, bytecode_size(word_t));
setlatestopcode(129);
return(code);
}
case 164:
{
/* [immed(int), ccall3(indirect(word_t)), s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(165, bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(165);
return(code);
}
case 171:
{
/* [s_push(1:255), ccall2(indirect(word_t)), s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(177, bytecode_size(code_t)+bytecode_size(word_t));
setlatestopcode(177);
return(code);
}
case 28:
{
/* [immed(0)] */
INSN_EMIT_modified_opcode(184, 0);
setlatestopcode(184);
return(code);
}
case 200:
{
/* [pushretval, s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(201, 0);
setlatestopcode(201);
return(code);
}
case 210:
{
/* [immed(char), ccall1(indirect(word_t)), s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(211, bytecode_size(char)+bytecode_size(word_t));
setlatestopcode(211);
return(code);
}
} /* switch */
INSN_EMIT_opcode(19);
setlatestopcode(19);
return(code);
}

DEFINEFN code_t* psyco_insn_cmplt(code_t* code)
{
switch (LATEST_OPCODE) {
case 28:
{
/* [immed(0)] */
INSN_EMIT_modified_opcode(115, 0);
setlatestopcode(115);
return(code);
}
case 78:
{
/* [s_push(0), immed(0)] */
INSN_EMIT_modified_opcode(179, 0);
setlatestopcode(179);
return(code);
}
} /* switch */
INSN_EMIT_opcode(20);
setlatestopcode(20);
return(code);
}

DEFINEFN code_t* psyco_insn_cmpltu(code_t* code)
{
switch (LATEST_OPCODE) {
case 33:
{
/* [s_push(1:255)] */
INSN_EMIT_modified_opcode(193, bytecode_size(code_t));
setlatestopcode(193);
return(code);
}
} /* switch */
INSN_EMIT_opcode(21);
setlatestopcode(21);
return(code);
}

DEFINEFN code_t* psyco_insn_pop(code_t* code)
{
switch (LATEST_OPCODE) {
case 73:
{
/* [immed(char), addo] */
INSN_EMIT_modified_opcode(74, bytecode_size(char));
setlatestopcode(74);
return(code);
}
case 87:
{
/* [s_push(1:255), immed(char), addo] */
INSN_EMIT_modified_opcode(88, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(88);
return(code);
}
case 103:
{
/* [incref, s_push(0:255), immed(char), addo] */
INSN_EMIT_modified_opcode(104, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(104);
return(code);
}
case 132:
{
/* [s_push(0), immed(char), addo] */
INSN_EMIT_modified_opcode(133, bytecode_size(char));
setlatestopcode(133);
return(code);
}
case 137:
{
/* [decref, s_push(0:255), immed(char), addo] */
INSN_EMIT_modified_opcode(138, bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(138);
return(code);
}
case 13:
{
/* [addo] */
INSN_EMIT_modified_opcode(183, 0);
setlatestopcode(183);
return(code);
}
case 194:
{
/* [s_push(1:255), decref, s_push(1:255), immed(char), addo] */
INSN_EMIT_modified_opcode(195, bytecode_size(code_t)+bytecode_size(code_t)+bytecode_size(char));
setlatestopcode(195);
return(code);
}
} /* switch */
INSN_EMIT_opcode(22);
setlatestopcode(22);
return(code);
}

DEFINEFN code_t* psyco_insn_settos(code_t* code, int arg1)
{
switch (LATEST_OPCODE) {
case 224:
{
/* [immed(int), retval] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(225, bytecode_size(word_t));
INSN_EMIT_byte(arg1);
setlatestopcode(225);
return(code);
}
else {
break;
}
}
} /* switch */
if (arg1 == 0) {
INSN_EMIT_opcode(23);
INSN_EMIT_void(arg1);
setlatestopcode(23);
return(code);
}
else {
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_opcode(24);
INSN_EMIT_byte(arg1);
setlatestopcode(24);
return(code);
}
else {
if (1 <= arg1) {
INSN_EMIT_opcode(25);
INSN_EMIT_int(arg1);
setlatestopcode(25);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(settos)");
return NULL;
}
}
}
}

DEFINEFN code_t* psyco_insn_pushn(code_t* code, word_t arg1)
{
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_opcode(26);
INSN_EMIT_char(arg1);
setlatestopcode(26);
return(code);
}
else {
if (1) {
INSN_EMIT_opcode(27);
INSN_EMIT_word_t(arg1);
setlatestopcode(27);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(pushn)");
return NULL;
}
}
}

DEFINEFN code_t* psyco_insn_immed(code_t* code, word_t arg1)
{
switch (LATEST_OPCODE) {
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(101, bytecode_size(word_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(101);
return(code);
}
case 89:
{
/* [incref, s_push(0:255)] */
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(102, bytecode_size(code_t));
INSN_EMIT_char(arg1);
setlatestopcode(102);
return(code);
}
else {
break;
}
}
case 85:
{
/* [ccall2(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(106, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(106);
return(code);
}
else {
break;
}
}
case 108:
{
/* [ccall1(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(112, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(112);
return(code);
}
else {
break;
}
}
case 32:
{
/* [s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(78, 0);
INSN_EMIT_void(arg1);
setlatestopcode(78);
return(code);
}
else {
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(116, 0);
INSN_EMIT_char(arg1);
setlatestopcode(116);
return(code);
}
else {
break;
}
}
}
case 51:
{
/* [incref] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(124, 0);
INSN_EMIT_void(arg1);
setlatestopcode(124);
return(code);
}
else {
break;
}
}
case 83:
{
/* [decref, s_push(0:255)] */
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(135, bytecode_size(code_t));
INSN_EMIT_char(arg1);
setlatestopcode(135);
return(code);
}
else {
break;
}
}
case 74:
{
/* [immed(char), addo, pop] */
INSN_EMIT_modified_opcode(144, bytecode_size(char));
INSN_EMIT_word_t(arg1);
setlatestopcode(144);
return(code);
}
case 147:
{
/* [immed(char), addo, pop, immed(int), store4] */
INSN_EMIT_modified_opcode(148, bytecode_size(char)+bytecode_size(word_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(148);
return(code);
}
case 96:
{
/* [immed(int), incref] */
INSN_EMIT_modified_opcode(150, bytecode_size(word_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(150);
return(code);
}
case 28:
{
/* [immed(0)] */
INSN_EMIT_modified_opcode(155, 0);
INSN_EMIT_word_t(arg1);
setlatestopcode(155);
return(code);
}
case 33:
{
/* [s_push(1:255)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(160, bytecode_size(code_t));
INSN_EMIT_void(arg1);
setlatestopcode(160);
return(code);
}
else {
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(84, bytecode_size(code_t));
INSN_EMIT_char(arg1);
setlatestopcode(84);
return(code);
}
else {
if (1) {
INSN_EMIT_modified_opcode(120, bytecode_size(code_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(120);
return(code);
}
else {
break;
}
}
}
}
case 149:
{
/* [immed(int), ccall3(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(164, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(164);
return(code);
}
else {
break;
}
}
case 98:
{
/* [s_push(1:255), ccall2(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(171, bytecode_size(code_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(171);
return(code);
}
else {
break;
}
}
case 95:
{
/* [s_push(1:255), decref, s_push(1:255)] */
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(173, bytecode_size(code_t)+bytecode_size(code_t));
INSN_EMIT_char(arg1);
setlatestopcode(173);
return(code);
}
else {
break;
}
}
case 75:
{
/* [pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(175, 0);
INSN_EMIT_void(arg1);
setlatestopcode(175);
return(code);
}
else {
break;
}
}
case 77:
{
/* [s_push(1:255), decref] */
INSN_EMIT_modified_opcode(197, bytecode_size(code_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(197);
return(code);
}
case 162:
{
/* [pushretval, s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(200, 0);
INSN_EMIT_void(arg1);
setlatestopcode(200);
return(code);
}
else {
break;
}
}
case 176:
{
/* [immed(char), ccall1(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(210, bytecode_size(char)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(210);
return(code);
}
else {
break;
}
}
case 183:
{
/* [addo, pop] */
INSN_EMIT_modified_opcode(212, 0);
INSN_EMIT_word_t(arg1);
setlatestopcode(212);
return(code);
}
case 213:
{
/* [addo, pop, immed(int), store4] */
INSN_EMIT_modified_opcode(214, bytecode_size(word_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(214);
return(code);
}
case 104:
{
/* [incref, s_push(0:255), immed(char), addo, pop] */
INSN_EMIT_modified_opcode(218, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_word_t(arg1);
setlatestopcode(218);
return(code);
}
case 219:
{
/* [immed(int), ccall4(indirect(word_t)), s_push(0)] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(220, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(220);
return(code);
}
else {
break;
}
}
case 152:
{
/* [s_push(0), incref, s_push(0)] */
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(222, 0);
INSN_EMIT_char(arg1);
setlatestopcode(222);
return(code);
}
else {
break;
}
}
case 52:
{
/* [decref] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(157, 0);
INSN_EMIT_void(arg1);
setlatestopcode(157);
return(code);
}
else {
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(229, 0);
INSN_EMIT_char(arg1);
setlatestopcode(229);
return(code);
}
else {
if (1) {
INSN_EMIT_modified_opcode(234, 0);
INSN_EMIT_word_t(arg1);
setlatestopcode(234);
return(code);
}
else {
break;
}
}
}
}
case 235:
{
/* [decref, immed(int), incref] */
INSN_EMIT_modified_opcode(236, bytecode_size(word_t));
INSN_EMIT_word_t(arg1);
setlatestopcode(236);
return(code);
}
case 248:
{
/* [store4, s_push(0:255), incref, s_push(0:255)] */
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_modified_opcode(249, bytecode_size(code_t)+bytecode_size(code_t));
INSN_EMIT_char(arg1);
setlatestopcode(249);
return(code);
}
else {
break;
}
}
case 50:
{
/* [store4] */
INSN_EMIT_modified_opcode(253, 0);
INSN_EMIT_word_t(arg1);
setlatestopcode(253);
return(code);
}
} /* switch */
if (arg1 == 0) {
INSN_EMIT_opcode(28);
INSN_EMIT_void(arg1);
setlatestopcode(28);
return(code);
}
else {
if (arg1 == 1) {
INSN_EMIT_opcode(29);
INSN_EMIT_void(arg1);
setlatestopcode(29);
return(code);
}
else {
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_opcode(30);
INSN_EMIT_char(arg1);
setlatestopcode(30);
return(code);
}
else {
if (1) {
INSN_EMIT_opcode(31);
INSN_EMIT_word_t(arg1);
setlatestopcode(31);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(immed)");
return NULL;
}
}
}
}
}

DEFINEFN code_t* psyco_insn_s_push(code_t* code, int arg1)
{
switch (LATEST_OPCODE) {
case 19:
{
/* [cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(76, 0);
INSN_EMIT_void(arg1);
setlatestopcode(76);
return(code);
}
else {
break;
}
}
case 52:
{
/* [decref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(83, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(83);
return(code);
}
else {
break;
}
}
case 65:
{
/* [ccall2(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(85, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(85);
return(code);
}
else {
break;
}
}
case 82:
{
/* [s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(86, 0);
INSN_EMIT_void(arg1);
setlatestopcode(86);
return(code);
}
else {
break;
}
}
case 51:
{
/* [incref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(89, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(89);
return(code);
}
else {
break;
}
}
case 81:
{
/* [immed(char), addo, pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(90, bytecode_size(char));
INSN_EMIT_void(arg1);
setlatestopcode(90);
return(code);
}
else {
break;
}
}
case 77:
{
/* [s_push(1:255), decref] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(95, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(95);
return(code);
}
else {
break;
}
}
case 93:
{
/* [s_push(1:255), immed(char), addo, pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(97, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_void(arg1);
setlatestopcode(97);
return(code);
}
else {
break;
}
}
case 94:
{
/* [s_push(1:255), ccall2(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(98, bytecode_size(code_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(98);
return(code);
}
else {
break;
}
}
case 64:
{
/* [ccall1(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(108, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(108);
return(code);
}
else {
break;
}
}
case 105:
{
/* [immed(int), s_push(1), ccall2(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(109, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(109);
return(code);
}
else {
break;
}
}
case 107:
{
/* [ccall2(indirect(word_t)), s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(117, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(117);
return(code);
}
else {
break;
}
}
case 113:
{
/* [ccall1(indirect(word_t)), s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(119, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(119);
return(code);
}
else {
break;
}
}
case 61:
{
/* [pyleave] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(121, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(121);
return(code);
}
else {
break;
}
}
case 31:
{
/* [immed(int)] */
if (arg1 == 1) {
INSN_EMIT_modified_opcode(100, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(100);
return(code);
}
else {
if ((2 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(123, bytecode_size(word_t));
INSN_EMIT_byte(arg1);
setlatestopcode(123);
return(code);
}
else {
break;
}
}
}
case 99:
{
/* [s_push(1:255), decref, s_push(1:255), decref] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(125, bytecode_size(code_t)+bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(125);
return(code);
}
else {
break;
}
}
case 74:
{
/* [immed(char), addo, pop] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(126, bytecode_size(char));
INSN_EMIT_byte(arg1);
setlatestopcode(126);
return(code);
}
else {
break;
}
}
case 141:
{
/* [immed(char), addo, pop, s_push(1:255), store4] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(142, bytecode_size(char)+bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(142);
return(code);
}
else {
break;
}
}
case 21:
{
/* [cmpltu] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(143, 0);
INSN_EMIT_void(arg1);
setlatestopcode(143);
return(code);
}
else {
break;
}
}
case 88:
{
/* [s_push(1:255), immed(char), addo, pop] */
if ((2 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(145, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_byte(arg1);
setlatestopcode(145);
return(code);
}
else {
break;
}
}
case 140:
{
/* [immed(int), ccall3(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(149, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(149);
return(code);
}
else {
break;
}
}
case 36:
{
/* [s_pop(1:255)] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(154, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(154);
return(code);
}
else {
break;
}
}
case 28:
{
/* [immed(0)] */
if ((2 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(161, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(161);
return(code);
}
else {
break;
}
}
case 59:
{
/* [pushretval] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(162, 0);
INSN_EMIT_void(arg1);
setlatestopcode(162);
return(code);
}
else {
break;
}
}
case 60:
{
/* [pyenter(indirect(word_t))] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(168, bytecode_size(word_t));
INSN_EMIT_byte(arg1);
setlatestopcode(168);
return(code);
}
else {
break;
}
}
case 115:
{
/* [immed(0), cmplt] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(169, 0);
INSN_EMIT_void(arg1);
setlatestopcode(169);
return(code);
}
else {
break;
}
}
case 159:
{
/* [immed(char), ccall1(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(176, bytecode_size(char)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(176);
return(code);
}
else {
break;
}
}
case 91:
{
/* [s_push(0), incref] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(152, 0);
INSN_EMIT_void(arg1);
setlatestopcode(152);
return(code);
}
else {
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(178, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(178);
return(code);
}
else {
break;
}
}
}
case 146:
{
/* [s_push(1:255), immed(char), addo, pop, s_push(2:255), store4] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(181, bytecode_size(code_t)+bytecode_size(char)+bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(181);
return(code);
}
else {
break;
}
}
case 184:
{
/* [immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(185, 0);
INSN_EMIT_void(arg1);
setlatestopcode(185);
return(code);
}
else {
break;
}
}
case 156:
{
/* [decref, s_push(0:255), immed(char), addo, pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(187, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_void(arg1);
setlatestopcode(187);
return(code);
}
else {
break;
}
}
case 9:
{
/* [load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(188, 0);
INSN_EMIT_void(arg1);
setlatestopcode(188);
return(code);
}
else {
break;
}
}
case 158:
{
/* [incref, s_push(0:255), immed(char), addo, pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(191, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_void(arg1);
setlatestopcode(191);
return(code);
}
else {
break;
}
}
case 166:
{
/* [s_push(1:255), ccall3(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(196, bytecode_size(code_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(196);
return(code);
}
else {
break;
}
}
case 129:
{
/* [immed(int), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(198, bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(198);
return(code);
}
else {
break;
}
}
case 163:
{
/* [pyleave, pushretval] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(202, 0);
INSN_EMIT_void(arg1);
setlatestopcode(202);
return(code);
}
else {
break;
}
}
case 177:
{
/* [s_push(1:255), ccall2(indirect(word_t)), s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(203, bytecode_size(code_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(203);
return(code);
}
else {
break;
}
}
case 174:
{
/* [immed(int), immed(int), ccall2(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(204, bytecode_size(word_t)+bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(204);
return(code);
}
else {
break;
}
}
case 183:
{
/* [addo, pop] */
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(205, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(205);
return(code);
}
else {
break;
}
}
case 206:
{
/* [addo, pop, s_push(1:255), store4] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(207, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(207);
return(code);
}
else {
break;
}
}
case 208:
{
/* [addo, pop, s_push(1:255), store4, s_push(0:255), incref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(209, bytecode_size(code_t)+bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(209);
return(code);
}
else {
break;
}
}
case 215:
{
/* [addo, pop, immed(int), store4, immed(int), incref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(216, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_byte(arg1);
setlatestopcode(216);
return(code);
}
else {
break;
}
}
case 128:
{
/* [immed(int), ccall4(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(219, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(219);
return(code);
}
else {
break;
}
}
case 182:
{
/* [s_push(0), immed(char), addo, pop, load4] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(221, bytecode_size(char));
INSN_EMIT_void(arg1);
setlatestopcode(221);
return(code);
}
else {
break;
}
}
case 22:
{
/* [pop] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(226, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(226);
return(code);
}
else {
break;
}
}
case 165:
{
/* [immed(int), ccall3(indirect(word_t)), s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(228, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(228);
return(code);
}
else {
break;
}
}
case 230:
{
/* [decref, s_push(0:255), decref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(231, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(231);
return(code);
}
else {
break;
}
}
case 232:
{
/* [decref, s_push(0:255), decref, s_push(0:255), decref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(233, bytecode_size(code_t)+bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(233);
return(code);
}
else {
break;
}
}
case 179:
{
/* [s_push(0), immed(0), cmplt] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(237, 0);
INSN_EMIT_void(arg1);
setlatestopcode(237);
return(code);
}
else {
break;
}
}
case 33:
{
/* [s_push(1:255)] */
if (arg1 == 1) {
INSN_EMIT_modified_opcode(238, bytecode_size(code_t));
INSN_EMIT_void(arg1);
setlatestopcode(238);
return(code);
}
else {
if ((2 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(127, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(127);
return(code);
}
else {
break;
}
}
}
case 240:
{
/* [immed(int), ccall2(indirect(word_t))] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(241, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(241);
return(code);
}
else {
break;
}
}
case 211:
{
/* [immed(char), ccall1(indirect(word_t)), s_push(0), immed(0), cmpeq] */
if (arg1 == 0) {
INSN_EMIT_modified_opcode(245, bytecode_size(char)+bytecode_size(word_t));
INSN_EMIT_void(arg1);
setlatestopcode(245);
return(code);
}
else {
break;
}
}
case 50:
{
/* [store4] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(246, 0);
INSN_EMIT_byte(arg1);
setlatestopcode(246);
return(code);
}
else {
break;
}
}
case 247:
{
/* [store4, s_push(0:255), incref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(248, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(248);
return(code);
}
else {
break;
}
}
case 254:
{
/* [store4, immed(int), incref] */
if (((unsigned)arg1) <= 255) {
INSN_EMIT_modified_opcode(255, bytecode_size(word_t));
INSN_EMIT_byte(arg1);
setlatestopcode(255);
return(code);
}
else {
break;
}
}
} /* switch */
if (arg1 == 0) {
INSN_EMIT_opcode(32);
INSN_EMIT_void(arg1);
setlatestopcode(32);
return(code);
}
else {
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_opcode(33);
INSN_EMIT_byte(arg1);
setlatestopcode(33);
return(code);
}
else {
if (1 <= arg1) {
INSN_EMIT_opcode(34);
INSN_EMIT_int(arg1);
setlatestopcode(34);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(s_push)");
return NULL;
}
}
}
}

DEFINEFN code_t* psyco_insn_s_pop(code_t* code, int arg1)
{
switch (LATEST_OPCODE) {
case 33:
{
/* [s_push(1:255)] */
if ((2 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_modified_opcode(122, bytecode_size(code_t));
INSN_EMIT_byte(arg1);
setlatestopcode(122);
return(code);
}
else {
break;
}
}
} /* switch */
if (arg1 == 0) {
INSN_EMIT_opcode(35);
INSN_EMIT_void(arg1);
setlatestopcode(35);
return(code);
}
else {
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_opcode(36);
INSN_EMIT_byte(arg1);
setlatestopcode(36);
return(code);
}
else {
if (1 <= arg1) {
INSN_EMIT_opcode(37);
INSN_EMIT_int(arg1);
setlatestopcode(37);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(s_pop)");
return NULL;
}
}
}
}

DEFINEFN code_t* psyco_insn_ref_push(code_t* code, word_t arg1)
{
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_opcode(38);
INSN_EMIT_char(arg1);
setlatestopcode(38);
return(code);
}
else {
if (1) {
INSN_EMIT_opcode(39);
INSN_EMIT_word_t(arg1);
setlatestopcode(39);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(ref_push)");
return NULL;
}
}
}

DEFINEFN code_t* psyco_insn_stackgrow(code_t* code)
{
INSN_EMIT_opcode(40);
setlatestopcode(40);
return(code);
}

DEFINEFN code_t* psyco_insn_assertdepth(code_t* code, word_t arg1)
{
if ((-128 <= arg1) && (arg1 <= 127)) {
INSN_EMIT_opcode(41);
INSN_EMIT_char(arg1);
setlatestopcode(41);
return(code);
}
else {
if (1) {
INSN_EMIT_opcode(42);
INSN_EMIT_word_t(arg1);
setlatestopcode(42);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(assertdepth)");
return NULL;
}
}
}

DEFINEFN code_t* psyco_insn_jcondnear(code_t* code, code_t** arg1)
{
INSN_EMIT_opcode(43);
INSN_EMIT_placeholder_byte(arg1);
setlatestopcode(43);
return(code);
}

DEFINEFN code_t* psyco_insn_jcondfar(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 32:
{
/* [s_push(0)] */
INSN_EMIT_modified_opcode(72, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(72);
return(code);
}
case 79:
{
/* [s_push(0), not] */
INSN_EMIT_modified_opcode(80, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(80);
return(code);
}
case 86:
{
/* [s_push(0), immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(92, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(92);
return(code);
}
case 110:
{
/* [immed(char), addo, pop, load4, s_push(0), not] */
INSN_EMIT_modified_opcode(111, bytecode_size(char));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(111);
return(code);
}
case 117:
{
/* [ccall2(indirect(word_t)), s_push(0), immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(118, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(118);
return(code);
}
case 119:
{
/* [ccall1(indirect(word_t)), s_push(0), immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(130, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(130);
return(code);
}
case 109:
{
/* [immed(int), s_push(1), ccall2(indirect(word_t)), s_push(0)] */
INSN_EMIT_modified_opcode(139, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(139);
return(code);
}
case 169:
{
/* [immed(0), cmplt, s_push(0)] */
INSN_EMIT_modified_opcode(170, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(170);
return(code);
}
case 186:
{
/* [immed(0), cmpeq, s_push(0), not] */
INSN_EMIT_modified_opcode(189, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(189);
return(code);
}
case 76:
{
/* [cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(190, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(190);
return(code);
}
case 228:
{
/* [immed(int), ccall3(indirect(word_t)), s_push(0), immed(0), cmpeq, s_push(0)] */
INSN_EMIT_modified_opcode(239, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(239);
return(code);
}
case 242:
{
/* [immed(int), ccall2(indirect(word_t)), s_push(0), not] */
INSN_EMIT_modified_opcode(243, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(243);
return(code);
}
case 217:
{
/* [immed(int), s_push(1), ccall2(indirect(word_t)), s_push(0), not] */
INSN_EMIT_modified_opcode(250, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(250);
return(code);
}
} /* switch */
INSN_EMIT_opcode(44);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(44);
return(code);
}

DEFINEFN code_t* psyco_insn_jumpfar(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(45);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(45);
return(code);
}

DEFINEFN code_t* psyco_insn_cbuild1(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(46);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(46);
return(code);
}

DEFINEFN code_t* psyco_insn_cbuild2(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 97:
{
/* [s_push(1:255), immed(char), addo, pop, load4, s_push(0)] */
INSN_EMIT_modified_opcode(114, bytecode_size(code_t)+bytecode_size(char));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(114);
return(code);
}
case 90:
{
/* [immed(char), addo, pop, load4, s_push(0)] */
INSN_EMIT_modified_opcode(227, bytecode_size(char));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(227);
return(code);
}
} /* switch */
INSN_EMIT_opcode(47);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(47);
return(code);
}

DEFINEFN code_t* psyco_insn_store1(code_t* code)
{
INSN_EMIT_opcode(48);
setlatestopcode(48);
return(code);
}

DEFINEFN code_t* psyco_insn_store2(code_t* code)
{
INSN_EMIT_opcode(49);
setlatestopcode(49);
return(code);
}

DEFINEFN code_t* psyco_insn_store4(code_t* code)
{
switch (LATEST_OPCODE) {
case 126:
{
/* [immed(char), addo, pop, s_push(1:255)] */
INSN_EMIT_modified_opcode(141, bytecode_size(char)+bytecode_size(code_t));
setlatestopcode(141);
return(code);
}
case 145:
{
/* [s_push(1:255), immed(char), addo, pop, s_push(2:255)] */
INSN_EMIT_modified_opcode(146, bytecode_size(code_t)+bytecode_size(char)+bytecode_size(code_t));
setlatestopcode(146);
return(code);
}
case 144:
{
/* [immed(char), addo, pop, immed(int)] */
INSN_EMIT_modified_opcode(147, bytecode_size(char)+bytecode_size(word_t));
setlatestopcode(147);
return(code);
}
case 205:
{
/* [addo, pop, s_push(1:255)] */
INSN_EMIT_modified_opcode(206, bytecode_size(code_t));
setlatestopcode(206);
return(code);
}
case 212:
{
/* [addo, pop, immed(int)] */
INSN_EMIT_modified_opcode(213, bytecode_size(word_t));
setlatestopcode(213);
return(code);
}
case 218:
{
/* [incref, s_push(0:255), immed(char), addo, pop, immed(int)] */
INSN_EMIT_modified_opcode(244, bytecode_size(code_t)+bytecode_size(char)+bytecode_size(word_t));
setlatestopcode(244);
return(code);
}
} /* switch */
INSN_EMIT_opcode(50);
setlatestopcode(50);
return(code);
}

DEFINEFN code_t* psyco_insn_incref(code_t* code)
{
switch (LATEST_OPCODE) {
case 32:
{
/* [s_push(0)] */
INSN_EMIT_modified_opcode(91, 0);
setlatestopcode(91);
return(code);
}
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(96, bytecode_size(word_t));
setlatestopcode(96);
return(code);
}
case 142:
{
/* [immed(char), addo, pop, s_push(1:255), store4, s_push(0:255)] */
INSN_EMIT_modified_opcode(167, bytecode_size(char)+bytecode_size(code_t)+bytecode_size(code_t));
setlatestopcode(167);
return(code);
}
case 148:
{
/* [immed(char), addo, pop, immed(int), store4, immed(int)] */
INSN_EMIT_modified_opcode(180, bytecode_size(char)+bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(180);
return(code);
}
case 207:
{
/* [addo, pop, s_push(1:255), store4, s_push(0:255)] */
INSN_EMIT_modified_opcode(208, bytecode_size(code_t)+bytecode_size(code_t));
setlatestopcode(208);
return(code);
}
case 214:
{
/* [addo, pop, immed(int), store4, immed(int)] */
INSN_EMIT_modified_opcode(215, bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(215);
return(code);
}
case 234:
{
/* [decref, immed(int)] */
INSN_EMIT_modified_opcode(235, bytecode_size(word_t));
setlatestopcode(235);
return(code);
}
case 246:
{
/* [store4, s_push(0:255)] */
INSN_EMIT_modified_opcode(247, bytecode_size(code_t));
setlatestopcode(247);
return(code);
}
case 253:
{
/* [store4, immed(int)] */
INSN_EMIT_modified_opcode(254, bytecode_size(word_t));
setlatestopcode(254);
return(code);
}
} /* switch */
INSN_EMIT_opcode(51);
setlatestopcode(51);
return(code);
}

DEFINEFN code_t* psyco_insn_decref(code_t* code)
{
switch (LATEST_OPCODE) {
case 33:
{
/* [s_push(1:255)] */
INSN_EMIT_modified_opcode(77, bytecode_size(code_t));
setlatestopcode(77);
return(code);
}
case 95:
{
/* [s_push(1:255), decref, s_push(1:255)] */
INSN_EMIT_modified_opcode(99, bytecode_size(code_t)+bytecode_size(code_t));
setlatestopcode(99);
return(code);
}
case 121:
{
/* [pyleave, s_push(1:255)] */
INSN_EMIT_modified_opcode(136, bytecode_size(code_t));
setlatestopcode(136);
return(code);
}
case 125:
{
/* [s_push(1:255), decref, s_push(1:255), decref, s_push(1:255)] */
INSN_EMIT_modified_opcode(153, bytecode_size(code_t)+bytecode_size(code_t)+bytecode_size(code_t));
setlatestopcode(153);
return(code);
}
case 83:
{
/* [decref, s_push(0:255)] */
INSN_EMIT_modified_opcode(230, bytecode_size(code_t));
setlatestopcode(230);
return(code);
}
case 231:
{
/* [decref, s_push(0:255), decref, s_push(0:255)] */
INSN_EMIT_modified_opcode(232, bytecode_size(code_t)+bytecode_size(code_t));
setlatestopcode(232);
return(code);
}
} /* switch */
INSN_EMIT_opcode(52);
setlatestopcode(52);
return(code);
}

DEFINEFN code_t* psyco_insn_decrefnz(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(53);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(53);
return(code);
}

DEFINEFN code_t* psyco_insn_exitframe(code_t* code)
{
INSN_EMIT_opcode(54);
setlatestopcode(54);
return(code);
}

DEFINEFN code_t* psyco_insn_ret(code_t* code, int arg1)
{
if (arg1 == 0) {
INSN_EMIT_opcode(55);
INSN_EMIT_void(arg1);
setlatestopcode(55);
return(code);
}
else {
if ((1 <= arg1) && (arg1 <= 255)) {
INSN_EMIT_opcode(56);
INSN_EMIT_byte(arg1);
setlatestopcode(56);
return(code);
}
else {
if (1 <= arg1) {
INSN_EMIT_opcode(57);
INSN_EMIT_int(arg1);
setlatestopcode(57);
return(code);
}
else {
psyco_fatal_msg("invalid_mode(ret)");
return NULL;
}
}
}
}

DEFINEFN code_t* psyco_insn_retval(code_t* code)
{
switch (LATEST_OPCODE) {
case 28:
{
/* [immed(0)] */
INSN_EMIT_modified_opcode(134, 0);
setlatestopcode(134);
return(code);
}
case 150:
{
/* [immed(int), incref, immed(int)] */
INSN_EMIT_modified_opcode(151, bytecode_size(word_t)+bytecode_size(word_t));
setlatestopcode(151);
return(code);
}
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(224, bytecode_size(word_t));
setlatestopcode(224);
return(code);
}
} /* switch */
INSN_EMIT_opcode(58);
setlatestopcode(58);
return(code);
}

DEFINEFN code_t* psyco_insn_pushretval(code_t* code)
{
switch (LATEST_OPCODE) {
case 61:
{
/* [pyleave] */
INSN_EMIT_modified_opcode(163, 0);
setlatestopcode(163);
return(code);
}
} /* switch */
INSN_EMIT_opcode(59);
setlatestopcode(59);
return(code);
}

DEFINEFN code_t* psyco_insn_pyenter(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(60);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(60);
return(code);
}

DEFINEFN code_t* psyco_insn_pyleave(code_t* code)
{
INSN_EMIT_opcode(61);
setlatestopcode(61);
return(code);
}

DEFINEFN code_t* psyco_insn_vmcall(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(62);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(62);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall0(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(63);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(63);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall1(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 30:
{
/* [immed(char)] */
INSN_EMIT_modified_opcode(159, bytecode_size(char));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(159);
return(code);
}
} /* switch */
INSN_EMIT_opcode(64);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(64);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall2(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 33:
{
/* [s_push(1:255)] */
INSN_EMIT_modified_opcode(94, bytecode_size(code_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(94);
return(code);
}
case 100:
{
/* [immed(int), s_push(1)] */
INSN_EMIT_modified_opcode(105, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(105);
return(code);
}
case 28:
{
/* [immed(0)] */
INSN_EMIT_modified_opcode(172, 0);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(172);
return(code);
}
case 101:
{
/* [immed(int), immed(int)] */
INSN_EMIT_modified_opcode(174, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(174);
return(code);
}
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(240, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(240);
return(code);
}
} /* switch */
INSN_EMIT_opcode(65);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(65);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall3(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(140, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(140);
return(code);
}
case 33:
{
/* [s_push(1:255)] */
INSN_EMIT_modified_opcode(166, bytecode_size(code_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(166);
return(code);
}
} /* switch */
INSN_EMIT_opcode(66);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(66);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall4(code_t* code, word_t** arg1)
{
switch (LATEST_OPCODE) {
case 31:
{
/* [immed(int)] */
INSN_EMIT_modified_opcode(128, bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(128);
return(code);
}
case 101:
{
/* [immed(int), immed(int)] */
INSN_EMIT_modified_opcode(192, bytecode_size(word_t)+bytecode_size(word_t));
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(192);
return(code);
}
} /* switch */
INSN_EMIT_opcode(67);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(67);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall5(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(68);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(68);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall6(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(69);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(69);
return(code);
}

DEFINEFN code_t* psyco_insn_ccall7(code_t* code, word_t** arg1)
{
INSN_EMIT_opcode(70);
INSN_EMIT_placeholder_long(arg1);
setlatestopcode(70);
return(code);
}

DEFINEFN code_t* psyco_insn_checkdict(code_t* code, word_t** arg1, word_t** arg2, word_t** arg3, word_t** arg4, word_t** arg5)
{
INSN_EMIT_opcode(71);
INSN_EMIT_placeholder_long(arg1);
INSN_EMIT_placeholder_long(arg2);
INSN_EMIT_placeholder_long(arg3);
INSN_EMIT_placeholder_long(arg4);
INSN_EMIT_placeholder_long(arg5);
setlatestopcode(71);
return(code);
}
